https://leetcode.com/problems/intersection-of-two-arrays-ii/

Given two integer arrays nums1 and nums2, return an array of their intersection.
Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.
 

Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000


Approach : We will keep adding element to hashmap for first array and keep increasing its frequency
when we reverse second array, if element is present on the hashmap we will add to the result list and remove this element from hashmap or if more then 1 frequency is present then we will reduce it by 1.

then we copy to result list to result array


class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        
       Map<Integer,Integer> map=new HashMap<>();
       List<Integer> result=new ArrayList<>();
        
       for(int i=0;i<nums1.length;i++){
           
           int val=nums1[i];
           
           if(map.containsKey(val)){
               map.put(val,map.get(val)+1);
           }else{
               map.put(val,1);
           }
       }
        
        for(int i: nums2){
            if(map.containsKey(i)){
                result.add(i);
                if(map.get(i)>1){
                    map.put(i,map.get(i)-1);
                }else{
                    map.remove(i);
                }
            }
        }
        
        int resultArr[]=new int[result.size()];
        
        for(int i=0;i< result.size();i++){
            resultArr[i]=result.get(i);
        }
        
        return resultArr;
    }
}


