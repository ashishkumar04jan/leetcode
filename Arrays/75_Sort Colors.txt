/*
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]

Approach : using pointer for each number and moving all 0's to left and all 2's to right. After doing so all 1's will automatically comes in centre.
Space and time Complexity : N
*/

class Solution {
    public void sortColors(int[] nums) {
        if(nums.length<2)
            return;
        int i=0,j=0,k=nums.length-1;
        
        while(j<=k){
            if(nums[j]==0)
                swap(nums,i++,j++);
            else if(nums[j]==2)
                swap(nums,j,k--);
            else
                j++;
            
        }

    }
    
    void swap(int arr[],int i, int j){
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }
}




 