https://leetcode.com/problems/maximum-product-subarray/

Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.


Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

Example 3:
Input: nums = [3,-1,4]
Output: 4

Example 4:
Input: nums = [-3,-1,-1]
Output: 3

Approach : To handle Negative number we are taking min and max two variable in each subarray . 
Also checking with current Element which can be also maximum element that product of subarray 


Solution:

public class MaximumProductSubarray {

	public static void main(String[] args) {
		int arr[] = { 2, 3, -2, 4 };
		System.out.println(maxProduct(arr));
	}

	public static int maxProduct(int[] nums) {
		int result = nums[0],min=nums[0],max=nums[0];
		
		for(int i=1;i<nums.length;i++) {
			int possibleMin=min*nums[i];
			int possibleMax=max*nums[i];
			
			min=Math.min(Math.min(nums[i], possibleMin), possibleMax);
			max=Math.max(Math.max(nums[i], possibleMax), possibleMin);
			
			result=Math.max(result, max);
		}

		return result;
	}

}




