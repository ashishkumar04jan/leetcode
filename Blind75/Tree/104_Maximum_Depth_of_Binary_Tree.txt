Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: 3

Example 2:

Input: root = [1,null,2]
Output: 2

Constraints:

The number of nodes in the tree is in the range [0, 104].
-100 <= Node.val <= 100

Approach : Keep one maxHeight variable and move to left and right to the subtree recursively,In each recursive call increase the height by 1.

class Solution {
    static int maxHeight;
    public int maxDepth(TreeNode root) {
        
        maxHeight=Integer.MIN_VALUE;
        
        int height=0;
        
        if(root==null)
            return height;
        
        calculateHeight(root,height+1);
        
        return maxHeight;
        
    }
    
    
    public static void calculateHeight(TreeNode node,int height){
        
        if(node.left==null && node.right==null){
            maxHeight=Math.max(maxHeight,height);
        }
        
        if(node.left!=null){
            calculateHeight(node.left,height+1);
        }
        
        if(node.right!=null){
            calculateHeight(node.right,height+1);
        }
    }
}