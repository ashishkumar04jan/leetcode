https://leetcode.com/problems/reverse-words-in-a-string/
Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"

Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.


Example 3:

Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.

Constraints:

1 <= s.length <= 104
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.
 

Follow-up: If the string data type is mutable in your language, can you solve it in-place with O(1) extra space?

Approach : Travasing from end and checking the index of Non-space character,then checking lastIndexof Space from that character.
Appending that to StringBuilder and updating the i and j as well  

Solution:

public class ReverseWordInString {

	public static void main(String[] args) {

		String s = "a good   example";
		System.out.println(reverseWords(s));
	}

	public static String reverseWords(String s) {

		if (s == null)
			return s;
		if (s.length() == 1)
			return s;

		StringBuilder sb = new StringBuilder();

		int j = 0;

		for (int i = s.length() - 1; i >= 0; i--) {

			if (s.charAt(i) != ' ') {
				j = i;
				i = s.lastIndexOf(" ", i);
				sb.append(s, i + 1, j + 1).append(" ");
			}

		}

		return sb.toString().trim();

	}

}





